name: ‚ö° Ultra-Light Deploy

on:
  push:
    branches: [main, next]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options: [production, staging]

env:
  NODE_VERSION: '22'
  ULTRA_LIGHT: true

jobs:
  # Ultra-fast validation
  validate-ultra:
    name: ‚ö° Ultra-Fast Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      environment: ${{ steps.check.outputs.environment }}
    
    steps:
      - name: ‚ö° Checkout (minimal)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: ‚ö° Setup Node.js (cached)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'
      
      - name: ‚ö° Install dependencies (ultra-fast)
        run: npm ci --prefer-offline --no-audit --no-fund --silent
      
      - name: ‚ö° Ultra-fast validation
        run: |
          echo "‚ö° Ultra-fast validation..."
          
          # Quick translation check
          npm run i18n:validate --silent || echo "Translation check failed"
          
          # Quick build test
          npm run build --silent
          
          # Quick size check
          SIZE=$(find dist -name '*.js' -o -name '*.css' | xargs gzip -c | wc -c)
          SIZE_KB=$((SIZE / 1024))
          echo "Bundle size: ${SIZE_KB} KB"
          
          # Only fail on critical issues
          if [ $SIZE_KB -gt 600 ]; then
            echo "‚ùå Bundle too large: ${SIZE_KB} KB"
            exit 1
          fi
      
      - name: ‚ö° Check deployment readiness
        id: check
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "‚úÖ Ready for production deployment"
          elif [ "${{ github.ref_name }}" = "next" ]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "‚úÖ Ready for staging deployment"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "environment=none" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è  Skipping deployment for branch: ${{ github.ref_name }}"
          fi

  # Ultra-optimized build
  build-ultra:
    name: üèóÔ∏è Ultra-Optimized Build
    runs-on: ubuntu-latest
    needs: validate-ultra
    if: needs.validate-ultra.outputs.should-deploy == 'true'
    timeout-minutes: 12
    
    steps:
      - name: ‚ö° Checkout (minimal)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: ‚ö° Setup Node.js (cached)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'
      
      - name: ‚ö° Ultra-fast cache
        uses: actions/cache@v4
        with:
          path: |
            dist/
            node_modules/.cache
            .vite
          key: ${{ runner.os }}-deploy-ultra-${{ hashFiles('package-lock.json', 'src/**/*') }}-v4
          restore-keys: |
            ${{ runner.os }}-deploy-ultra-v4-
            ${{ runner.os }}-deploy-ultra-
      
      - name: ‚ö° Install dependencies (ultra-fast)
        run: npm ci --prefer-offline --no-audit --no-fund --silent
      
      - name: ‚ö° Ultra-optimized build
        run: |
          # Set ultra-optimized environment
          export NODE_ENV=production
          export NODE_OPTIONS="--max-old-space-size=4096"
          export VITE_BUILD_OPTIMIZE=true
          export VITE_DEPLOY_OPTIMIZE=true
          
          # Build with maximum optimization
          npm run build:prod --silent
        env:
          NODE_ENV: production
          NODE_OPTIONS: "--max-old-space-size=4096"
          VITE_BUILD_OPTIMIZE: true
          VITE_DEPLOY_OPTIMIZE: true
          GITHUB_REF: ${{ github.ref }}
          GITHUB_SHA: ${{ github.sha }}
      
      - name: ‚ö° Ultra-fast verification
        run: |
          echo "‚ö° Ultra-fast build verification..."
          
          # Check only critical files
          CRITICAL_FILES=("index.html" "robots.txt" "sitemap.xml")
          for file in "${CRITICAL_FILES[@]}"; do
            [ -f "dist/$file" ] && echo "‚úÖ $file" || (echo "‚ùå $file missing" && exit 1)
          done
          
          # Quick size check
          SIZE=$(find dist -name '*.js' -o -name '*.css' | xargs gzip -c | wc -c)
          SIZE_KB=$((SIZE / 1024))
          echo "üì¶ Final bundle: ${SIZE_KB} KB"
          
          # Generate deployment info
          echo "üöÄ Deployment Info" > dist/deployment-info.txt
          echo "==================" >> dist/deployment-info.txt
          echo "Environment: ${{ needs.validate-ultra.outputs.environment }}" >> dist/deployment-info.txt
          echo "Branch: ${{ github.ref_name }}" >> dist/deployment-info.txt
          echo "Commit: ${{ github.sha }}" >> dist/deployment-info.txt
          echo "Build Time: $(date -u)" >> dist/deployment-info.txt
          echo "Bundle Size: ${SIZE_KB} KB" >> dist/deployment-info.txt
      
      - name: ‚ö° Upload artifact (ultra-fast)
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

  # Ultra-light deployment
  deploy-ultra:
    name: üöÄ Ultra-Light Deploy
    environment:
      name: ${{ needs.validate-ultra.outputs.environment == 'production' && 'github-pages' || 'github-pages-staging' }}
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [validate-ultra, build-ultra]
    if: needs.validate-ultra.outputs.should-deploy == 'true'
    timeout-minutes: 5
    
    steps:
      - name: ‚ö° Ultra-fast deployment
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: ‚ö° Ultra-fast verification
        run: |
          echo "üöÄ Ultra-fast deployment completed!"
          echo "Environment: ${{ needs.validate-ultra.outputs.environment }}"
          echo "URL: ${{ steps.deployment.outputs.page_url }}"
          
          # Quick health check
          sleep 5
          if curl -f -s --max-time 10 "${{ steps.deployment.outputs.page_url }}" > /dev/null; then
            echo "‚úÖ Site is accessible"
          else
            echo "‚ö†Ô∏è  Site may not be fully propagated yet"
          fi
