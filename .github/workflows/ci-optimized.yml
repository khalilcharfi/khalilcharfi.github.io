name: 🚀 Ultra-Fast CI Pipeline

on:
  push:
    branches: [main, next, develop]
  pull_request:
    branches: [main, next, develop]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests for faster execution'
        required: false
        default: false
        type: boolean
      skip_lint:
        description: 'Skip linting for faster execution'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '22'  # Latest LTS
  CACHE_VERSION: 'v3'
  ULTRA_FAST: true

jobs:
  # Ultra-fast parallel validation jobs
  lint-and-typecheck:
    name: 🔍 Lint & TypeCheck
    runs-on: ubuntu-latest
    if: ${{ inputs.skip_lint != true }}
    timeout-minutes: 5
    
    steps:
      - name: ⚡ Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # Shallow clone for speed
      
      - name: ⚡ Setup Node.js (cached)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'
      
      - name: ⚡ Install dependencies (ultra-fast)
        run: |
          npm ci --prefer-offline --no-audit --no-fund --silent
      
      - name: ⚡ Parallel linting
        run: |
          # Run linting and type checking in parallel
          npm run lint --silent &
          npm run type-check --silent &
          wait
      
      - name: ⚡ Format check
        run: npm run format:check --silent

  test-ultra-fast:
    name: 🧪 Ultra-Fast Tests
    runs-on: ubuntu-latest
    if: ${{ inputs.skip_tests != true }}
    timeout-minutes: 8
    
    strategy:
      matrix:
        test-group: [unit, integration, e2e]
    
    steps:
      - name: ⚡ Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: ⚡ Setup Node.js (cached)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'
      
      - name: ⚡ Install dependencies (ultra-fast)
        run: |
          npm ci --prefer-offline --no-audit --no-fund --silent
      
      - name: ⚡ Run ${{ matrix.test-group }} tests
        run: |
          case "${{ matrix.test-group }}" in
            unit) npm run test:unit --silent --coverage --watchAll=false ;;
            integration) npm run test:integration --silent --watchAll=false ;;
            e2e) npm run test:e2e --silent --watchAll=false ;;
          esac
      
      - name: ⚡ Upload coverage (unit only)
        if: matrix.test-group == 'unit'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.test-group }}-${{ github.run_id }}
          path: coverage/
          retention-days: 3

  validate-translations-ultra:
    name: 🌐 Ultra-Fast i18n
    runs-on: ubuntu-latest
    timeout-minutes: 3
    
    steps:
      - name: ⚡ Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: ⚡ Setup Node.js (cached)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'
      
      - name: ⚡ Cache translations
        uses: actions/cache@v4
        with:
          path: |
            src/features/i18n/data/translations.ts
            translations.ts
          key: ${{ runner.os }}-i18n-${{ hashFiles('**/translations.ts') }}-${{ env.CACHE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-i18n-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-i18n-
      
      - name: ⚡ Install dependencies (ultra-fast)
        run: npm ci --prefer-offline --no-audit --no-fund --silent
      
      - name: ⚡ Validate translations (ultra-fast)
        run: npm run i18n:validate --silent

  build-ultra-optimized:
    name: 🏗️ Ultra-Optimized Build
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test-ultra-fast, validate-translations-ultra]
    timeout-minutes: 10
    
    steps:
      - name: ⚡ Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: ⚡ Setup Node.js (cached)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'
      
      - name: ⚡ Ultra-fast cache
        uses: actions/cache@v4
        with:
          path: |
            dist/
            node_modules/.cache
            .vite
          key: ${{ runner.os }}-build-ultra-${{ hashFiles('package-lock.json', 'src/**/*', 'vite.config.ts') }}-${{ env.CACHE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-build-ultra-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-build-ultra-
            ${{ runner.os }}-build-
      
      - name: ⚡ Install dependencies (ultra-fast)
        run: |
          npm ci --prefer-offline --no-audit --no-fund --silent
      
      - name: ⚡ Ultra-optimized build
        run: |
          # Set ultra-fast build environment
          export NODE_ENV=production
          export NODE_OPTIONS="--max-old-space-size=4096"
          export VITE_BUILD_OPTIMIZE=true
          
          # Build with maximum optimization
          npm run build:prod --silent
        env:
          NODE_ENV: production
          NODE_OPTIONS: "--max-old-space-size=4096"
          VITE_BUILD_OPTIMIZE: true
      
      - name: ⚡ Ultra-fast verification
        run: |
          # Quick verification without heavy operations
          echo "🔍 Ultra-fast build verification..."
          
          # Check critical files only
          REQUIRED_FILES=("index.html" "robots.txt" "sitemap.xml")
          for file in "${REQUIRED_FILES[@]}"; do
            [ -f "dist/$file" ] && echo "✅ $file" || (echo "❌ $file missing" && exit 1)
          done
          
          # Quick bundle size check
          SIZE=$(find dist -name '*.js' -o -name '*.css' | xargs gzip -c | wc -c)
          SIZE_KB=$((SIZE / 1024))
          echo "📦 Bundle: ${SIZE_KB} KB"
          
          # Fail only if critically large
          [ $SIZE_KB -lt 600 ] || (echo "❌ Bundle too large: ${SIZE_KB} KB" && exit 1)
      
      - name: ⚡ Upload build artifacts (ultra-fast)
        uses: actions/upload-artifact@v4
        with:
          name: build-ultra-${{ github.run_id }}
          path: dist/
          retention-days: 1  # Shorter retention for speed
          compression-level: 1  # Fastest compression

  security-ultra:
    name: 🔒 Ultra-Fast Security
    runs-on: ubuntu-latest
    timeout-minutes: 3
    
    steps:
      - name: ⚡ Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: ⚡ Setup Node.js (cached)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'
      
      - name: ⚡ Install dependencies (ultra-fast)
        run: npm ci --prefer-offline --no-audit --no-fund --silent
      
      - name: ⚡ Ultra-fast security audit
        run: |
          # Quick security check
          npm audit --audit-level=high --json > audit.json 2>/dev/null || true
          
          # Check for critical vulnerabilities only
          CRITICAL=$(jq '.vulnerabilities | to_entries | map(select(.value.severity == "critical")) | length' audit.json 2>/dev/null || echo "0")
          
          if [ "$CRITICAL" -gt 0 ]; then
            echo "❌ Critical vulnerabilities found: $CRITICAL"
            exit 1
          else
            echo "✅ No critical vulnerabilities"
          fi

  performance-ultra:
    name: ⚡ Ultra-Fast Performance
    runs-on: ubuntu-latest
    needs: build-ultra-optimized
    if: github.event_name == 'pull_request'
    timeout-minutes: 5
    
    steps:
      - name: ⚡ Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: ⚡ Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-ultra-${{ github.run_id }}
          path: dist/
      
      - name: ⚡ Ultra-fast performance check
        run: |
          echo "⚡ Ultra-fast performance analysis..."
          
          # Quick bundle analysis
          TOTAL_SIZE=$(find dist -name '*.js' -o -name '*.css' | xargs gzip -c | wc -c)
          TOTAL_SIZE_KB=$((TOTAL_SIZE / 1024))
          
          echo "📊 Bundle Size: ${TOTAL_SIZE_KB} KB"
          
          # Performance targets
          TARGET=400
          WARNING=500
          
          if [ $TOTAL_SIZE_KB -le $TARGET ]; then
            echo "✅ Excellent performance!"
          elif [ $TOTAL_SIZE_KB -le $WARNING ]; then
            echo "⚠️  Performance warning: ${TOTAL_SIZE_KB} KB"
          else
            echo "❌ Performance issue: ${TOTAL_SIZE_KB} KB"
            exit 1
          fi

  # Ultra-fast summary
  summary-ultra:
    name: 📊 Ultra-Fast Summary
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test-ultra-fast, validate-translations-ultra, build-ultra-optimized, security-ultra]
    if: always()
    timeout-minutes: 1
    
    steps:
      - name: ⚡ Generate ultra-fast summary
        run: |
          echo "## ⚡ Ultra-Fast CI Summary" > summary.md
          echo "" >> summary.md
          echo "| Job | Status | Duration |" >> summary.md
          echo "|-----|--------|----------|" >> summary.md
          echo "| Lint | ${{ needs.lint-and-typecheck.result == 'success' && '✅' || '❌' }} | ~2min |" >> summary.md
          echo "| Test | ${{ needs.test-ultra-fast.result == 'success' && '✅' || '❌' }} | ~5min |" >> summary.md
          echo "| i18n | ${{ needs.validate-translations-ultra.result == 'success' && '✅' || '❌' }} | ~1min |" >> summary.md
          echo "| Build | ${{ needs.build-ultra-optimized.result == 'success' && '✅' || '❌' }} | ~8min |" >> summary.md
          echo "| Security | ${{ needs.security-ultra.result == 'success' && '✅' || '❌' }} | ~2min |" >> summary.md
          echo "" >> summary.md
          echo "**Total Time:** ~18 minutes (ultra-optimized)" >> summary.md
          echo "**Overall:** ${{ needs.lint-and-typecheck.result == 'success' && needs.test-ultra-fast.result == 'success' && needs.validate-translations-ultra.result == 'success' && needs.build-ultra-optimized.result == 'success' && '✅ All checks passed' || '❌ Some checks failed' }}" >> summary.md
      
      - name: ⚡ Upload summary
        uses: actions/upload-artifact@v4
        with:
          name: ci-summary-ultra-${{ github.run_id }}
          path: summary.md
          retention-days: 1
