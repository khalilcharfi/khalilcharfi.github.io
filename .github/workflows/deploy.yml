name: Deploy to GitHub Pages

on:
  push:
    branches: [ main, next ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      # 2Ô∏è‚É£ Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      # 3Ô∏è‚É£ Install dependencies
      - name: Install dependencies
        run: |
          npm ci
          # Ensure terser is available (should be in devDependencies)
          npm list terser || npm install --save-dev terser
        
      # 4Ô∏è‚É£ Create production .env
      - name: Create production .env
        run: |
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY || '' }}" > .env.production
          echo "VITE_ENABLE_CHATBOT=${{ secrets.VITE_ENABLE_CHATBOT || 'false' }}" >> .env.production
          echo "VITE_ENABLE_DYNAMIC_CONTENT=${{ secrets.VITE_ENABLE_DYNAMIC_CONTENT || 'false' }}" >> .env.production
          echo "VITE_SHOW_DEV_ELEMENTS=false" >> .env.production
          echo "VITE_SHOW_VISITOR_CONTROLS=false" >> .env.production
          echo "VITE_SHOW_PROFILE_INSIGHTS=false" >> .env.production
          echo "VITE_SHOW_TRANSLATION_DEBUG=false" >> .env.production
          echo "VITE_SHOW_DEBUG_INFO=false" >> .env.production
          
      # 5Ô∏è‚É£ Test environment variables
      - name: Test environment variables
        run: |
          echo "Testing environment variables..."
          node -e "
            const fs = require('fs');
            const envContent = fs.readFileSync('.env.production', 'utf8');
            console.log('Production .env content:');
            console.log(envContent.replace(/GEMINI_API_KEY=.*/, 'GEMINI_API_KEY=***HIDDEN***'));
          "
          
      # 6Ô∏è‚É£ Build project
      - name: Build project
        run: |
          npm run build:prod
          
          # Ensure dist exists
          if [ ! -d dist ]; then
            echo "Error: dist/ folder not found. Build failed."
            exit 1
          fi
        
      # 7Ô∏è‚É£ Prepare deploy folder for master branch (next branch only)
      - name: Prepare deploy folder for master branch
        if: github.ref == 'refs/heads/next'
        run: |
          mkdir -p deploy
          cp -r dist/* deploy/
          cp .env.production deploy/
          cp .env.example deploy/ 2>/dev/null || echo "No .env.example found, skipping"
          cp README.md deploy/
          cp package.json deploy/
          
      # 8Ô∏è‚É£ Deploy to GitHub Pages (main branch)
      - name: Deploy to GitHub Pages (main branch)
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          
      # 9Ô∏è‚É£ Deploy to GitHub Pages Preview (next branch to gh-pages)
      - name: Deploy to GitHub Pages Preview (next branch)
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/next' && github.event_name == 'push'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          # cname: your-custom-domain.com  # Optional: replace with your custom domain
          
      # üîü Deploy to master branch (next branch only)
      - name: Deploy to master branch (production)
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/next' && github.event_name == 'push'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./deploy
          publish_branch: master
          force_orphan: true  # replaces entire master content