name: Deploy Portfolio to GitHub Pages

on:
  push:
    branches:
      - main
      - next  # Added next branch for staging
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages-${{ github.ref_name }}"
  cancel-in-progress: false

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'  # Latest LTS
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --prefer-offline
      
      - name: Validate translations
        run: npm run i18n:validate
      
      - name: Check bundle size
        run: |
          npm run build
          TOTAL_SIZE=$(find dist -name '*.js' -o -name '*.css' | xargs gzip -c | wc -c)
          TOTAL_SIZE_KB=$((TOTAL_SIZE / 1024))
          echo "Bundle size: ${TOTAL_SIZE_KB} KB"
          
          if [ $TOTAL_SIZE_KB -gt 500 ]; then
            echo "‚ùå Bundle size too large: ${TOTAL_SIZE_KB} KB > 500 KB"
            exit 1
          else
            echo "‚úÖ Bundle size acceptable: ${TOTAL_SIZE_KB} KB"
          fi
      
      - name: Check deployment readiness
        id: check
        run: |
          if [ "${{ github.ref_name }}" = "main" ] || [ "${{ github.ref_name }}" = "next" ]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Ready for deployment"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è  Skipping deployment for branch: ${{ github.ref_name }}"
          fi

  build:
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should-deploy == 'true'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'  # Latest LTS
          cache: 'npm'
      
      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            dist/
            node_modules/.cache
          key: ${{ runner.os }}-build-${{ hashFiles('package-lock.json', 'src/**/*') }}
          restore-keys: |
            ${{ runner.os }}-build-
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: npm ci --prefer-offline
      
      - name: Build project
        run: npm run build:prod
        env:
          NODE_ENV: production
          GITHUB_REF: ${{ github.ref }}
          GITHUB_SHA: ${{ github.sha }}
      
      - name: Verify build output
        run: |
          echo "üîç Verifying build output..."
          
          # Check required files
          REQUIRED_FILES=("index.html" "robots.txt" "sitemap.xml" "llms.txt")
          for file in "${REQUIRED_FILES[@]}"; do
            if [ -f "dist/$file" ]; then
              echo "‚úÖ $file exists"
            else
              echo "‚ùå $file missing"
              exit 1
            fi
          done
          
          # Check asset directories
          if [ -d "dist/assets" ]; then
            echo "‚úÖ Assets directory exists"
            echo "üìä Asset count: $(find dist/assets -type f | wc -l)"
          else
            echo "‚ùå Assets directory missing"
            exit 1
          fi
          
          # Check language files
          LANG_FILES=("index.de.html" "index.fr.html" "index.ar.html")
          for file in "${LANG_FILES[@]}"; do
            if [ -f "dist/$file" ]; then
              echo "‚úÖ $file exists"
            else
              echo "‚ùå $file missing"
              exit 1
            fi
          done
          
          echo "‚úÖ Build verification complete"
      
      - name: Generate deployment info
        run: |
          echo "üìä Deployment Information" > dist/deployment-info.txt
          echo "=========================" >> dist/deployment-info.txt
          echo "Branch: ${{ github.ref_name }}" >> dist/deployment-info.txt
          echo "Commit: ${{ github.sha }}" >> dist/deployment-info.txt
          echo "Build Time: $(date -u)" >> dist/deployment-info.txt
          echo "Workflow: ${{ github.workflow }}" >> dist/deployment-info.txt
          echo "Run ID: ${{ github.run_id }}" >> dist/deployment-info.txt
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'
  
  deploy:
    environment:
      name: ${{ github.ref_name == 'main' && 'github-pages' || 'github-pages-staging' }}
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: needs.validate.outputs.should-deploy == 'true'
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: Post-deployment verification
        run: |
          echo "üöÄ Deployment completed!"
          echo "URL: ${{ steps.deployment.outputs.page_url }}"
          echo "Environment: ${{ github.ref_name == 'main' && 'Production' || 'Staging' }}"
          
          # Wait a moment for deployment to propagate
          sleep 10
          
          # Basic health check
          if curl -f -s "${{ steps.deployment.outputs.page_url }}" > /dev/null; then
            echo "‚úÖ Site is accessible"
          else
            echo "‚ö†Ô∏è  Site may not be fully propagated yet"
          fi