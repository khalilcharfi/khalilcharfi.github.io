name: üöÄ Simple CI Pipeline

on:
  push:
    branches: [master, next, develop]
  pull_request:
    branches: [master, next, develop]
  workflow_dispatch:
    inputs:
      skip_build:
        description: 'Skip build step'
        required: false
        default: false
        type: boolean

concurrency:
  group: "ci-${{ github.ref_name }}-${{ github.event.head_commit.id }}"
  cancel-in-progress: true

env:
  NODE_VERSION: '22'

jobs:
  # Simple validation
  validate:
    name: ‚úÖ Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: ‚ö° Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: ‚ö° Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: ‚ö° Install dependencies
        run: npm ci --prefer-offline --no-audit --no-fund --silent
      
      - name: ‚ö° Validate translations
        run: npm run i18n:validate --silent || echo "Translation validation completed with warnings"
      
      - name: ‚ö° Quick build test
        run: |
          echo "üèóÔ∏è Testing build process..."
          npm run build --silent
          echo "‚úÖ Build test successful"

  # Comprehensive validation and build
  build:
    name: üèóÔ∏è Build & Validate
    runs-on: ubuntu-latest
    needs: validate
    if: ${{ inputs.skip_build != true }}
    timeout-minutes: 15
    
    steps:
      - name: ‚ö° Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: ‚ö° Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: ‚ö° Install dependencies
        run: npm ci --prefer-offline --no-audit --no-fund --silent
      
      - name: ‚ö° Build project
        run: |
          echo "üèóÔ∏è Building project..."
          npm run build:prod --silent
          echo "‚úÖ Build completed successfully"
      
      - name: ‚ö° Comprehensive verification
        run: |
          echo "üîç Comprehensive build verification..."
          
          # Check required files
          REQUIRED_FILES=("index.html" "robots.txt" "sitemap.xml")
          for file in "${REQUIRED_FILES[@]}"; do
            if [ -f "dist/$file" ]; then
              echo "‚úÖ $file exists"
            else
              echo "‚ùå $file missing"
              exit 1
            fi
          done
          
          # Check bundle size
          TOTAL_SIZE=$(find dist -name '*.js' -o -name '*.css' | xargs gzip -c | wc -c)
          TOTAL_SIZE_KB=$((TOTAL_SIZE / 1024))
          echo "üì¶ Bundle size: ${TOTAL_SIZE_KB} KB"
          
          if [ $TOTAL_SIZE_KB -gt 600 ]; then
            echo "‚ö†Ô∏è  Bundle size warning: ${TOTAL_SIZE_KB} KB > 600 KB"
          else
            echo "‚úÖ Bundle size acceptable: ${TOTAL_SIZE_KB} KB"
          fi
          
          # Additional validation
          echo "üîç Running additional validations..."
          
          # Check HTML structure
          if grep -q "<!DOCTYPE html>" dist/index.html; then
            echo "‚úÖ HTML DOCTYPE found"
          else
            echo "‚ùå HTML DOCTYPE missing"
            exit 1
          fi
          
          # Check for critical meta tags
          if grep -q 'name="viewport"' dist/index.html; then
            echo "‚úÖ Viewport meta tag found"
          else
            echo "‚ö†Ô∏è  Viewport meta tag missing"
          fi
          
          echo "‚úÖ All validations passed"
      
      - name: ‚ö° Ultra compress production build
        run: |
          echo "üóúÔ∏è Compressing production build with maximum compression..."
          
          # Create ultra-compressed tarball with maximum compression
          tar --create --gzip --file=build-ultra-compressed.tar.gz \
              --exclude='*.map' \
              --exclude='*.log' \
              --exclude='*.tmp' \
              --exclude='*.temp' \
              --exclude='node_modules' \
              --exclude='.git' \
              --exclude='.DS_Store' \
              --exclude='Thumbs.db' \
              -C dist .
          
          # Get compression stats
          ORIGINAL_SIZE=$(du -sh dist | cut -f1)
          COMPRESSED_SIZE=$(du -sh build-ultra-compressed.tar.gz | cut -f1)
          COMPRESSION_RATIO=$(echo "scale=1; $(du -sb dist | cut -f1) / $(du -sb build-ultra-compressed.tar.gz | cut -f1)" | bc -l)
          
          echo "üìä Compression Statistics:"
          echo "  Original size: $ORIGINAL_SIZE"
          echo "  Compressed size: $COMPRESSED_SIZE"
          echo "  Compression ratio: ${COMPRESSION_RATIO}x"
          echo "  Space saved: $(echo "scale=1; (1 - 1/$COMPRESSION_RATIO) * 100" | bc -l)%"
          
          # Verify the compressed archive
          if tar -tzf build-ultra-compressed.tar.gz > /dev/null 2>&1; then
            echo "‚úÖ Archive verification successful"
          else
            echo "‚ùå Archive verification failed"
            exit 1
          fi

      - name: ‚ö° Upload compressed build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-ultra-compressed-${{ github.run_id }}
          path: build-ultra-compressed.tar.gz
          retention-days: 7
          compression-level: 9

  # Simple summary
  summary:
    name: üìä CI Summary
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: always()
    timeout-minutes: 1
    
    steps:
      - name: ‚ö° Generate summary
        run: |
          echo "## üöÄ Simple CI Summary" > summary.md
          echo "" >> summary.md
          echo "| Step | Status |" >> summary.md
          echo "|------|--------|" >> summary.md
          echo "| Validation | ${{ needs.validate.result == 'success' && '‚úÖ' || '‚ùå' }} |" >> summary.md
          echo "| Build | ${{ needs.build.result == 'success' && '‚úÖ' || '‚ùå' }} |" >> summary.md
          echo "" >> summary.md
          echo "**Overall:** ${{ needs.validate.result == 'success' && needs.build.result == 'success' && '‚úÖ All checks passed' || '‚ùå Some checks failed' }}" >> summary.md
          echo "" >> summary.md
          echo "**Duration:** ~15 minutes (simplified)" >> summary.md
      
      - name: ‚ö° Upload summary
        uses: actions/upload-artifact@v4
        with:
          name: ci-summary-simple-${{ github.run_id }}
          path: summary.md
          retention-days: 1
